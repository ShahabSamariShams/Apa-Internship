Chapter 1:

Why? SQLi, Mass Assignment, and IDOR.
Why database? manageable, efficient storing, easier organize, access and analyze.
SQL? structured query lang. manage relational dbs. enables user interaction with db.(owasp related.)
NoSQL? not only sql. not relational, handles unstructured data.
query? how you talk to db.
root? a user that exists by default. has access to everything. other uers have limited access normally.
Structure? database -> table(e.g. users) -> column(e.g. users' attributes) -> data
Relational? IDs connecting e.g. user and book(s).

MySQL:
mysql-secure-installation
there exists some default dbs.

------------------------------------------------------

Chapter 2:

Craeting a database -> create database <database name>;
get in the database -> use <database name>;
Craeting tables:
<code starts.>
CREATE TABLE users(
    id INT PRIMARY KEY AUTO_INCREMENT, --users are accessable also by id that are primary keys, an it increments automatically per user.
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    age INT,
    craeted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
<code ends.>

Inserting:
<code starts.>
INSERT INTO users(username. email, age)
VALUES ('mamad', 'mamad@mail.com', 23);
<code ends.>

Selection:
<code starts.>
SELECT <column1>, <column2> FROM users;
SELECT * FROM users; -- all columns from users table.
<code ends.>

Conditional:
<code starts.>
SELECT * FROM users WHERE username = 'mamad';
SELECT * FROM users WHERE username = 'mamad' OR username = 'ali';
SELECT * FROM users WHERE username = 'mamad' AND username = 'ali';
<code ends.>

a simple login query:
<code starts.>
SELECT * FROM users WHERE username = 'user' AND password = 'pass';
<code ends.>

Update:
<code starts.>
UPDATE users SET age = 45, username = 'ahmad' WHERE id = 2;
<code ends.>

Delete:
<code starts.>
DELETE FROM users WHERE id > 25;
<code ends.>

Describe: shows the blueprint of a table.
<code starts.>
DESCRIBE users;
<code ends.>

------------------------------------------------------

Chapter 3:

Union Select: to combine the results of multiple SELECT query. it's a method for data extraction.
<code starts.>
SELECT username, email FROM users UNION SELECT something1, something2 FROM anotherTable;
<code ends.>
number of columns on both sides should be equal. if not, an error occurs that is useful in SQLi.

Order by: used to sort the results.
<code starts.>
SELECT x, y, z FROM users ORDER BY y; --can place 2 instead of y, meaning the second foretold column.
SELECT x, y, z FROM users ORDER BY 2;
<code ends.>
what if I insert a column number that is more than the number of columns declared?
you will receive an error, that is useful in SQLi.
