Chapter 1:

Why network? internet's universality. Exploitation and discovery. security device bypassing. side recon conduction.
Bypass? circumventing security measures.
Exploit? taking advantage of vulnerabilities.
Protocol? rule set gor communication.
Client? a comp in network.
Server? serves data.
Internet? gigantic network of clients and servers.

OSI? Refernece model for dissimilar environments communication.
Layers?
Application*: SSH, HTTP, SMTP.
Presentation: Compression and encryption.(SSL)
Session: Connection managemnet without error.
Transport*: TCP and UDP.(assemler if number sequences.)
Network*: IP address, routing.
Data link: Mac/physical address.
Physical: Electrons.

IP? internet address for reaching a comp.
Port? various channels for communication.
Router? routes the traffic to a destination.
notation-> <IP>:<port>
Each port has a different service.

TCP: connection-oriented.(trustable)
UDP: connectionless.(eg dns.)

TCP flags: SYN(synchronization), ACK(acknowledgemnet)
TCP three way hand shake: syn, syn/ack, ack.

nc tool:
nc -lvp <portnumber> -> listen on the given port.
nc <ip> <port> -> connect to this ip address and port number over tcp.

wireshark tools:
ip.dst==<ip> -> filters packets with a particular dst.
follow <Protocol> stream -> observe the packets.

------------------------------------------------------

Chapter 2:

DNS? Domain Name Service. it's a network protocol.(It's in the application layer.)
Works over UDP.
8.8.8.8:53 -> google public dns server.
IP/UDP/DNS and then IP/TCP/HTTP.
DNS query? a request for asking for the IP address.
DNS client? machine sending name resolution queries.(part of the os.)
DNS server? machine that responds to the queries.
Name server? equal to the DNS server.
Name Resolution? converting domain name into ip address.
Dns client has a default dns server to send it's queries to.(Browsers likewise.)
Top level domain(tld)? .ir, .com and so on.
Name resolution has a hierarchial process: dns client -> dns server -> root -> name server of your tld -> name server of your domain

Dns records:
A rec: IPv4 addr.
AAAA rec: IPv6 addr.
CNAME: another domain name for same IP. asking for this will return the original domain name.
MX: mail servers.
TXT: text info.(anything)
NS: authoritative name server.(legit name servers of a domain.)

HOST FILE? manual method of name resolution. set an IP for a domain manually.
format-> <ip> <domain name>
it's path on linux is etc/hosts

dig tool:
a utility package for sending dns queries and receiving dns records.
dig <record type> <domain name> -> gives the determined record type of the domain.

ping tool:
checking the reachability of a domain and gives the A record.
ping <domain name>

subl tool:
a text editor better than damned vim.

there is a dns id in hex, which is for preventing the loss of your query response that is sent back.

------------------------------------------------------

Chapter 3:

Part 1: Web Server
Serving resources to the users by HTTP protocol.(FTP server uses FTP.) -> IP/TCP/HTTP (UDP is also possible.)
like apache, nginx(it's used mostly for it's load balancer and reverse proxy features.)

Configuration:
main Configuration: main setting of your web server. -> etc/apache2/apache2.conf
several sub-configuration files also exist. how?
-> using directive: IncludeOptional
directive? a configuration command to change settings.
IncludeOptional another.conf

Some Directives:
DocumentRoot -> directory where files an folders are.
ServerName -> hostname of a virtual host.
Listen -> the IP and port where apache is bound. ip 127.0.0.1 -> local host, 0.0.0.0 -> connetion from everybody is accepeted.
default port is 80.
ErrorLog -> location of the error files.
Include -> like the IncludeOptional.
Directory -> to enclose a grooup of directives. have a group of directives on a directory.
Files -> to limit the scope of the enclosed directives.(e.g not showing some files to the user.)
IfModule -> directives only applied if module is present.(e.g if ssl module exists, do som shit.)

Apache needs to start as root. listening socket on privileged ports(ports that need higher access).(but, running as root and remaining root
id not  a good thing.) So how?
->  Uses the root to run itself, then uses setuid to switch to user.(downgrade it's privileges)
setuid? execute a program with the permissions of the program's owner.
www-data is the server's user.

Work Flow: process of a happentance or function.
mamad searched for a site:
DNS -> TCP handshake(TCP/IP connection)(No domain exists here) -> SSL handshake -> HTTP packet
(domain has a partial presence in ssl and http packet.)

Document root: where the web server searches for what user has asked for.

Virtual Host: multiole hosts on server.(multiple sites, multiple document roots.)

Part 2:
apcahe installation:
sudo apt update
sudo apt install apache2

|User ${APACHE_RUN_USER}  | what user and group should apache2 downgrade to when exiting root.
|Group ${APACHE_RUN_GROUP}|
if host header (http) does not match anything in apache sites, it brings the first one up.

sites-enabled -> working hosts. host conf files are here.
sites-available -> non operative hosts. host conf files are here.

ServerName doesn't exist by default/ buut you can add it.(or not.)

command: a2ensite mamadvirtual.conf -> brings the conf file to sites-enabled from sites-available, links it to the conf file an it's doc root in 
var/www/html/
command: a2dissite sitename -> disables the site.
you need to restart apache service in order to make your site work.
command: systemctl reload apache2 -> restarts apache service.

"host1.conf -> ../sites-available/000-default.conf" -> being linked to a conf file.

index file is the file that gets loaded by default.

for searching non default virtual hosts, you need to add them to your hosts file. error is sth like "can't resolve".

command -> python3 -m http.server 9000
web server on port 9000. fucking weird and requires more probing.