Chapter 1:

Why linux? Discovery and Exploitation of vulnerabilities and privilege escalation. Servers are mostly on linux.
Shell? Command-line intrepreter.(human lang to machine lang.)(e.g bash, sh, zsh)(bash and zsh are improved versions of sh.)
<Shell-name> profile? shell's configuration.
Path? directories of executable programs.
command: echo $SHELL -> prints your shell type.

------------------------------------------------------

Chapter 2: 

Package Manager:either command line interface of graphical user interface.
apt for debian based.
yum for red hat based.
pacman for arch.

linux distribuition: customized version of linux os.

linux basic commands:
ls -> listing.
cd -> change/open directory.
pwd -> current directory.
mkdir -> make a directory.
rm -> deleting.
cp -> copying.
mv -> cutting.
cat -> showa content.
echo -> printing. mostly environmental variables like $SHELL.
wget -> downloading.
id -> who am I?(detailed.)
whoami -> who am I?(no detail.)
uname -> your kernel version and date.
ps -> processes that are running.
du -> file volume.

directories: directories are hierarchial. all starts from the root or '/'.
important paths:
/bin -> binary executable files.
/etc -> system configuration files.(we look for poc in here.)
/home -> user's personal files and settings.
/root -> home directory of the root user or the superuser.
/var -> variable data like logs and databases. also the DocumnetRoot of web servers.
/temp -> stores files temporarily.(bounty programs testing happens here for safety.)

Some Important Files:
/etc/passwd -> user account information. except for passwords. a commonality in bug bounty for proving your access. used in reports.
/etc/shadow -> stores encrypted passwords for user accounts. passwords are hashed.
/etc/group -> information about user groups. 
/etc/hosts -> maps ip addresses to host names.
/etc/reslove.conf -> DNS server used for name resolution.
/home/<username>/.ssh -> sensitive SSH file for the user.
point: passwd is Nobody Readable.(everyone can read this.)

Permissions:
Read('r') -> allows the user to view the contents of a file or directory and list them.
Write('w') -> allows modifying the content or deletion/creation of files.
Execute('x') -> allows execution of a file or openning a directory.

Identity Categories:
User(Owner) -> user who owns the file or directory.
Group -> a collection of users who share common access rights.
Others -> everyone else.(like Nobody. it's rather relative. two usres can be Nobody to each other.)

drwxr-xr-x   8 root                 root                  4096 Jul 23 09:06 apache2
d -> it's a dir. can be '-' meaning it's a file.
rwx -> Permissions of the user.
r-x -> Permissions of the group.
r-x -> Permissions of Nobody.
root (the first one.) -> user.
root (the seconf one.) -> the group.
apache2 -> the name.

Authorization? access control, rights of the user.
Authentication? verifying the user's identity.

SUDO? SuperUser DO. execute a command as the root. user should be a sudoer.(grannted by the root.)
sudo -i -> permanent root.

SSH? cryptographic network protocol. to reach a remote shell. requires authentication.
ssh <user>@<ip>:<port> -> IP/TCP/SSH
connects to port 22 by default if the port's not given.

sudo adduser <username> -> adding a new user.
su <username> -> entering a user.
visudo etc/sudoers -> add the user name under the root and copy root's stuff ifront of it.(use ctrl+x, y, enter, to save. it's a nano editor.)

------------------------------------------------------

Chapter 3:

I/O stream:
stdin? used to read user input, file descriptor(fd) 0. fd is a number given to a particular process.
stdout? used to display output on terminal. fd 1.
stderr? used to display error messages on terminal. fd 2.

'>' -> redirects standard output to a file.
id > output -> write id result in the given file.
id 2> output -> if id gave you an error, write the error in the given output file.
id 2>&1 -> turn stderr into stdout.
id &> file -> write both stderr and stdout in a file.
id &> /dev/null -> an os blackhole. os will devour what you give it. so you won't have any output.

'<' -> redirects standard input from a file.

'>>' -> appends standard output to a file.(file previous content won't be deleted.)

'|' -> pipe operator. output of one command as the input of another one. stdout to stdin.
cm1 | cm2 -> output of sm1 as the input of cm2.

run a command in background -> command '&'

Seperators:
';' -> cm1;cm2

Operators:
cm1 && cm2 -> 2 will be executed if 1 completes "successfully".
cm1 || cm2 -> 2 will be executed if 1 fails.

if: 
<code starts.>
number=10
if [ $number -gt 5 ]; then #greater than.
    echo "greater"
else
    echo "smaller or equal"
fi
<code ends.>

loop:

while: point -> it accepts stdin.
<code starts.>
count=1
while [$count -le 5]; #little or equal.
do
    echo "val: $count"
    ((count++))       #((...)) is for doing mathematical calculations.
done
<code ends.>

for:
<code starts.>
fruits = ("apple" "orange" "bannana")
for fruit in "${$fruits[@]}";
do
    echo "$fruit"
done
<code ends.>

Command Substitution:
run a command within a subshell and capture it's output.
$(command) OR `command`

e.g -> host mamad.com &> /dev/null && echo "resolved" => you will realise if mamad.com was resolved in a single word.

subfinder tool -> for finding the subdomains of a site. => subfinder -d mamad.ir

sleep 5 => sleep for 5 secs.
sleep 5 & => run on background.

host tool => host <ip/domain> -> resolve an ip to domain or a domain to an ip.